import matplotlib.pyplot as plt

# Definición de nodos y conexiones
nodes = {
    'A': [(1, 2), {'B': 1, 'C': 4}],
    'B': [(2, 3), {'A': 1, 'C': 2, 'D': 5}],
    'C': [(2, 1), {'A': 4, 'B': 2, 'D': 1}],
    'D': [(3, 2), {'B': 5, 'C': 1}],
}

# Función para el algoritmo de Dijkstra
def dijkstra(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    unvisited_nodes = graph.copy()

    while unvisited_nodes:
        current_node = min(unvisited_nodes, key=lambda node: distances[node])
        unvisited_nodes.pop(current_node)

        for neighbor, weight in graph[current_node][1].items():
            potential_route = distances[current_node] + weight

            if potential_route < distances[neighbor]:
                distances[neighbor] = potential_route

    return distances

# Obtener las distancias mínimas desde el nodo 'A'
distances = dijkstra(nodes, 'A')

# Dibujar el grafo
fig, ax = plt.subplots()
for node, (pos, _) in nodes.items():
    plt.scatter(*pos, c='r', s=100)
    plt.text(pos[0], pos[1], f'{node}({distances[node]})', fontsize=12)
    for neighbor, weight in nodes[node][1].items():
        plt.plot([pos[0], nodes[neighbor][0][0]], [pos[1], nodes[neighbor][0][1]], 'b')

plt.show()
